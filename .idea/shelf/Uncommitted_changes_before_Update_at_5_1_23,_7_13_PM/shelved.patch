Index: templates/RequestForm.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!-- Extending base code to use Jinja principles -->\n{% extends \"base.html\" %}\n\n{% block title %}Request Form{% endblock %}\n\n{% block html_head %}\n    <div class=\"GenProduct_HeadingSpacer\"></div>\n    <strong>Leave a Request</strong>\n{% endblock %}\n\n{% block page_content %}\n\n    <!-- Add padding between top of the page and contents within the table -->\n    <div class=\"GenProduct_HeadingSpacer\"></div>\n    <!-- Centers and bolds heading text for the page -->\n    <div class = \"h1-Center\">\n        <!-- Heading text for entire webpage  -->\n        <h4>If you have any questions, concerns or ideas for us please complete the form below!</h4>\n    </div>\n    <div class=\"GenProduct_HeadingSpacer\"></div>\n    <!-- Create two column layout to house form and photo side by side-->\n    <div class = \"GenProduct_rowLayout\">\n        <div class=\"GenProduct_columnLayout\">\n             <!--Placing image on left hand column-->\n            <img src=\"../static/images/Contact%20Us%20Page%20Piic.png\" width = \"450\" height = \"470\" alt=\"ATB Model Skateboarding\" style = \"padding-left: 20px\">\n        </div>\n        <!-- create new, right-handed side column-->\n        <div class=\"GenProduct_columnLayout\">\n        <!-- adds passing between both columns to evenly space information -->\n        <div class = \"GenProduct_VerticalSpacer\">\n        <!-- conditional formatting to show confirmation message to users after completing the form -->\n            <div class = \"GenProduct_VerticalRightSpacer\">\n{#            {% if form_submitted %}#}\n{#                <div class=\"row\">#}\n{#                     <div class=\"formInputFields\">#}\n{#                             <!-- Centers text on confirmation output -->#}\n{#                             <div class = \"h1-Center\">#}\n{#                                <!-- Message outputted to user after form completed -->#}\n{#                                <h3>Thank you {{ request.form.get('first_name')}} for submitting a request, we will get back to you as soon as possible!</h3>#}\n{#                             </div>#}\n{#                          <!--Placing icon under confirmation message-->#}\n{#                          <img src=\"../static/images/RequestForm_FormConfirmation.png\" width = \"100\" height = \"100\" alt=\"Form Sent Confirmation Icon\" class = \"center-image\">#}\n{#                     </div>#}\n{#                </div>#}\n{#            <!--If form is not completed, this is the information that users will see-->#}\n{#            {% else %}#}\n        <!--Creates form to collection customer's requests-->\n        <form action=\"{{ url_for('RequestForm') }}\" method=\"post\">\n        <div class=\"inputBoxTotal\" style=\"padding-left: 24px\">\n            <div class=\"row\">\n                <!--Styling for each of the boxes, background color of form and buttons used within form -->\n                <div class=\"border-box col\">\n                    <div class=\"formInputFields\">\n                        {% if current_user.is_authenticated %}\n                            <div class = \"row\">\n                            <!--Field to collect users message -->\n                            <p class=\"formFieldsLabels\">Message(*)</p>\n                            <input type=\"text\" class=\"inputFields\" name=\"message\" required rows=\"5\"><br><br>\n                        </div>\n                        {% else %}\n                        <div class = \"row\">\n                            <div class=\"border-box col\">\n                                <div class=\"row\" style=\"padding-right: 15px\">\n                                    <!--Field to collect users first name -->\n                                    <p class=\"formFieldsLabels\">First Name(*)<br></p>\n                                    <input type=\"text\" class=\"inputFields\" name=\"first_name\" required>\n                                </div>\n                            </div>\n                            <div class=\"border-box col\">\n                                <div class=\"row\" style=\"padding-left: 15px\">\n                                    <!--Field to collect users last name -->\n                                    <p class=\"formFieldsLabels\">Last Name(*)<br></p>\n                                    <input type=\"text\" class=\"inputFields\" name=\"last_name\" required><br><br>\n                                </div>\n                            </div>\n                        </div>\n                        <div class = \"row\">\n                            <!--Field to collect users email -->\n                            <p class=\"formFieldsLabels\">Email(*)</p>\n                            <input type=\"email\" class=\"inputFields\" name=\"email\" required><br><br>\n                        </div>\n\n                        <div class = \"row\">\n                            <!--Field to collect users message -->\n                            <p class=\"formFieldsLabels\">Message(*)</p>\n                            <input type=\"text\" class=\"inputFields\" name=\"message\" required><br><br>\n                        </div>\n                     {% endif %}\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class = \"vertical-center\">\n                        <!--Field to submit the users answers inputted into the form -->\n                        <input type=\"submit\" value=\"Submit Request\" class=\"checkoutButtons\" style=\"float: right; margin: 20px; padding: 7px 75px 7px 75px;\">\n                    </div>\n                </div>\n            </div>\n        </div>\n                </form>\n                </div>\n                </div>\n                </div>\n    </div>\n    <!-- adds spacing between bottom of all text content and footer -->\n    <div class=\"GenProduct_HeadingSpacer\"></div>\n{% endblock %}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/RequestForm.html b/templates/RequestForm.html
--- a/templates/RequestForm.html	(revision fed8e36bcdd31c6938f63ebf787014c1991c7757)
+++ b/templates/RequestForm.html	(date 1682982751174)
@@ -30,20 +30,7 @@
         <div class = "GenProduct_VerticalSpacer">
         <!-- conditional formatting to show confirmation message to users after completing the form -->
             <div class = "GenProduct_VerticalRightSpacer">
-{#            {% if form_submitted %}#}
-{#                <div class="row">#}
-{#                     <div class="formInputFields">#}
-{#                             <!-- Centers text on confirmation output -->#}
-{#                             <div class = "h1-Center">#}
-{#                                <!-- Message outputted to user after form completed -->#}
-{#                                <h3>Thank you {{ request.form.get('first_name')}} for submitting a request, we will get back to you as soon as possible!</h3>#}
-{#                             </div>#}
-{#                          <!--Placing icon under confirmation message-->#}
-{#                          <img src="../static/images/RequestForm_FormConfirmation.png" width = "100" height = "100" alt="Form Sent Confirmation Icon" class = "center-image">#}
-{#                     </div>#}
-{#                </div>#}
-{#            <!--If form is not completed, this is the information that users will see-->#}
-{#            {% else %}#}
+
         <!--Creates form to collection customer's requests-->
         <form action="{{ url_for('RequestForm') }}" method="post">
         <div class="inputBoxTotal" style="padding-left: 24px">
@@ -55,7 +42,7 @@
                             <div class = "row">
                             <!--Field to collect users message -->
                             <p class="formFieldsLabels">Message(*)</p>
-                            <input type="text" class="inputFields" name="message" required rows="5"><br><br>
+                            <textarea rows="5" cols="20" placeholder="Enter your review here!" name="message" require></textarea>
                         </div>
                         {% else %}
                         <div class = "row">
@@ -83,7 +70,7 @@
                         <div class = "row">
                             <!--Field to collect users message -->
                             <p class="formFieldsLabels">Message(*)</p>
-                            <input type="text" class="inputFields" name="message" required><br><br>
+                            <textarea rows="5" cols="20" placeholder="Enter your review here!" name="message" require></textarea>
                         </div>
                      {% endif %}
                     </div>
Index: app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\nfrom flask import Flask, render_template, request, redirect, url_for, flash, session\nfrom flask_login import LoginManager, login_user, login_required, logout_user, current_user\nfrom werkzeug.security import check_password_hash, generate_password_hash\nfrom werkzeug.utils import secure_filename\nfrom authorize import role_required\nfrom models import *\n\nbasedir = os.path.abspath(os.path.dirname(__file__))\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + os.path.join(basedir, 'ATB2.db')\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\napp.config['SECRET_KEY'] = 'beyond_course_scope'\ndb.init_app(app)\n\n\nlogin_manager = LoginManager()\nlogin_manager.login_view = 'LogIn' # default login route\nlogin_manager.init_app(app)\n\n# Product image parameters\napp.config['PRODUCT_UPLOAD_PATH'] = 'static/products'\n\n# Product order restrictions\napp.config['MAX_QUANTITY_PER_ITEM'] = 99\n\n@login_manager.user_loader\ndef load_user(account_id):\n   return Credentials.query.get(account_id)\n\n@app.route('/')\ndef homePage():\n    return render_template('Home Page.html')\n\n@app.route('/404')\ndef errorPage():\n    return render_template('Inventory.html'), 404\n\n@app.route('/Shop')\ndef Shop():\n    items = InventoryInfo.query.order_by(InventoryInfo.item_name).all()\n    return render_template('Shop.html', items=items)\n\n# @app.route('/EnterItems')\n# def EnterItems():\n#     return render_template('Input_Inventory.html')\n\n@app.route('/About')\ndef About():\n    return render_template('About Page.html')\n\n\n@app.route('/profile')\ndef Profile():\n    return render_template('profile.html')\n\n@app.route('/RequestForm', methods=['GET', 'POST'])\ndef RequestForm():\n    if request.method == 'GET':\n        return render_template('RequestForm.html', action='create')\n    elif request.method == 'POST':\n\n        if current_user.is_authenticated:\n\n            account_id = current_user.account_id\n            first_name = current_user.first_name\n            last_name = current_user.last_name\n            email = current_user.email\n            message = request.form['message']\n\n            requests = Requests(account_id=account_id, first_name=first_name, last_name=last_name, email=email, message=message)\n\n        else:\n            account_id = None\n            first_name = request.form['first_name']\n            last_name = request.form['last_name']\n            email = request.form['email']\n            message = request.form['message']\n\n            requests = Requests(account_id=account_id, first_name=first_name, last_name=last_name, email=email, message=message)\n\n        db.session.add(requests)\n        db.session.commit()\n\n        flash(f'Your request was received!', 'success')\n        return redirect(url_for('RequestForm'))\n\n    # Address issue where unsupported HTTP request method is attempted\n    flash(f'Invalid request. Please contact support if this problem persists.', 'error')\n    return redirect(url_for('homePage'))\n\n@app.route('/RequestsLog/Delete/<int:request_id>')\n@login_required\n@role_required(['ADMIN'])\ndef requests_fulfilled(request_id):\n   request = Requests.query.filter_by(request_id=request_id).first()\n   if request:\n       db.session.delete(request)\n       db.session.commit()\n       flash(f'{request_id} was successfully deleted!', 'success')\n   else:\n       flash(f'Delete failed! Collection could not be found.', 'error')\n\n   return redirect(url_for('requests_view_all'))\n\n@app.route('/ReviewForm', methods=['GET', 'POST'])\ndef ReviewForm():\n    review = Reviews.query.order_by(Reviews.review_id) \\\n        .all()\n    if request.method == 'GET':\n        return render_template('ReviewForm.html', action='create', review=review)\n    elif request.method == 'POST':\n\n        if current_user.is_authenticated:\n\n            account_id = current_user.account_id\n            first_name = current_user.first_name\n            last_name = current_user.last_name\n            email = current_user.email\n            message = request.form['message']\n            rating = request.form['rating']\n            posted = False\n\n            reviews = Reviews(account_id=account_id, first_name=first_name, last_name=last_name, email=email,\n                                message=message, rating=rating, posted=posted)\n\n        else:\n            account_id = None\n            first_name = request.form['first_name']\n            last_name = request.form['last_name']\n            email = request.form['email']\n            message = request.form['message']\n            rating = request.form['rating']\n            posted = False\n\n            reviews = Reviews(account_id=account_id, first_name=first_name, last_name=last_name, email=email,\n                                message=message, rating=rating, posted=posted)\n\n        db.session.add(reviews)\n        db.session.commit()\n\n        flash(f'Your review was received! ATB will post it shortly.', 'success')\n        return redirect(url_for('ReviewForm'))\n\n        # Address issue where unsupported HTTP request method is attempted\n    flash(f'Invalid request. Please contact support if this problem persists.', 'error')\n    return redirect(url_for('homePage'))\n\n\n@app.route('/ReviewsLog')\n@login_required\n@role_required(['ADMIN', 'EMPLOYEE'])\ndef reviews_view_all():\n   reviews = Reviews.query.order_by(Reviews.review_id) \\\n       .all()\n   return render_template('ReviewsLog.html', reviews=reviews)\n\n@app.route('/ReviewsLog/Delete/<int:review_id>')\n@login_required\n@role_required(['ADMIN'])\ndef review_delete(review_id):\n   reviews = Reviews.query.filter_by(review_id=review_id).first()\n   if reviews:\n       db.session.delete(reviews)\n       db.session.commit()\n       flash(f'{review_id} was successfully deleted!', 'success')\n   else:\n       flash(f'Delete failed! Review could not be found.', 'error')\n\n   return redirect(url_for('reviews_view_all'))\n\n@app.route('/ReviewsLog/Post/<int:review_id>')\n@login_required\n@role_required(['ADMIN'])\ndef review_post(review_id):\n   reviews = Reviews.query.filter_by(review_id=review_id).first()\n   if reviews:\n       if reviews.posted == False:\n           reviews.posted = True\n           db.session.commit()\n           flash(f'{review_id} was successfully posted!', 'success')\n       else:\n           reviews.posted = False\n           db.session.commit()\n           flash(f'{review_id} was successfully un-posted!', 'success')\n   else:\n       flash(f'Post failed! Review could not be found.', 'error')\n\n   return redirect(url_for('reviews_view_all'))\n\n@app.route('/LogIn', methods = ['GET', 'POST'])\n# def LogInScreen():\n#     if request.method == 'POST':\n#         return render_template('Log-In-Screen.html', form_submitted=True)\n#     else:\n#         return render_template('Log-In-Screen.html')\ndef LogIn():\n   default_route_function = 'Shop'\n   default_user_route_function = 'homePage'\n\n   if request.method == 'GET':\n       # Determine where to redirect user if they are already logged in\n       if current_user and current_user.is_authenticated:\n           if current_user.role in ['EMPLOYEE', 'ADMIN']:\n               return redirect(url_for(default_route_function))\n           elif current_user.role == 'STUDENT':\n               return redirect(url_for(default_user_route_function, user_id=0))\n       else:\n           redirect_route = request.args.get('next')\n           return render_template('Log-In-Screen.html', redirect_route=redirect_route)\n\n   elif request.method == 'POST':\n       username = request.form.get('username')\n       password = request.form.get('password')\n       redirect_route = request.form.get('redirect_route')\n\n       user = Credentials.query.filter_by(username=username).first()\n\n       # Validate user credentials and redirect them to initial destination\n       if user and check_password_hash(user.password, password):\n           login_user(user)\n\n           if current_user.role in ['EMPLOYEE', 'ADMIN']:\n               return redirect(redirect_route if redirect_route else url_for(default_route_function))\n           elif current_user.role == 'STUDENT':\n               return redirect(redirect_route if redirect_route else url_for(default_user_route_function, user_id=0))\n       else:\n           flash(f'Your login information was not correct. Please try again.', 'error')\n\n       return redirect(url_for('LogIn'))\n\n   return redirect(url_for('LogIn'))\n\n@app.route('/signup', methods=['GET', 'POST'])\ndef SignUp():\n\n    if request.method == 'GET':\n        return render_template('sign-up-page.html', action='create')\n\n    elif request.method == 'POST':\n       username = request.form['username']\n       password = request.form['password']\n       first_name = request.form['first_name']\n       last_name = request.form['last_name']\n       email = request.form['email']\n\n       sha_password = generate_password_hash(password, method='sha256', salt_length=8)\n\n       user = Credentials(username=username, password=sha_password, first_name=first_name, last_name=last_name,\n                           email=email)\n\n       db.session.add(user)\n       db.session.commit()\n       login_user(user)\n       flash(f'{username} was successfully added!', 'success')\n       return redirect(url_for('homePage'))\n\n\n   # Address issue where unsupported HTTP request method is attempted\n# flash(f'Invalid request. Please contact support if this problem persists.', 'error')\n# return redirect(url_for('SignUp'))\n\n@app.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    flash(f'You have been logged out.', category='success')\n    return redirect(url_for('homePage'))\n\n@app.route('/CheckOut', methods=['GET', 'POST'])\ndef CheckOut():\n    if request.method == 'POST':\n        # return render_template('CheckoutPage.html', form_submitted=True)\n        return render_template('Order Confirmation.html')\n    else:\n        return render_template('CheckoutPage.html')\n\n@app.route('/GenericProduct')\ndef GenProduct():\n    items = InventoryInfo.query.order_by(InventoryInfo.item_name).all()\n    return render_template('GenericProductPage.html', items=items)\n\n@app.route('/RequestsLog')\n@login_required\n@role_required(['ADMIN', 'EMPLOYEE'])\ndef requests_view_all():\n   requests = Requests.query.order_by(Requests.request_id) \\\n       .all()\n   return render_template('Request Log.html', requests=requests)\n\n\n@app.route('/InventoryLog')\n@login_required\n@role_required(['ADMIN', 'MANAGER'])\ndef items_view_all():\n  items = InventoryInfo.query.order_by(InventoryInfo.item_name) \\\n      .all()\n  return render_template('Inventory Log.html', items=items)\n\n\n@app.route('/InventoryLog/update/<int:product_id>', methods=['GET', 'POST'])\n@login_required\n@role_required(['ADMIN', 'MANAGER'])\ndef item_edit(product_id):\n  if request.method == 'GET':\n      item = InventoryInfo.query.filter_by(product_id=product_id).first()\n\n      if item:\n          return render_template('Input_Inventory.html', item=item, action='update')\n\n      else:\n          flash(f'Item attempting to be edited could not be found!', 'error')\n\n  elif request.method == 'POST':\n      item = InventoryInfo.query.filter_by(product_id=product_id).first()\n\n      if item:\n          item.item_name = request.form['item_name']\n          item.xsmall = request.form['xsmall']\n          item.small = request.form['small']\n          item.medium = request.form['medium']\n          item.large = request.form['large']\n          item.xlarge = request.form['xlarge']\n          item.xxlarge = request.form['xxlarge']\n          item.price = request.form['price']\n          item.desc = request.form['desc']\n          # image = request.files['image']\n\n          # if('delete_product_image' in request.form or image != '') and 'current_product_image' != '' :\n          #     try:\n          #       os.remove(os.path.join(basedir, app.config['PRODUCT_UPLOAD_PATH'], item.image))\n          #       item.image = ''\n          #     except:\n          #       pass\n\n              # filename = secure_filename(item.item_name + '-' + image.filename)\n              #\n              # if image.filename != '':\n              #     image.save(os.path.join(basedir, app.config['PRODUCT_UPLOAD_PATH'], filename))\n              #     item.image = filename if image else ''\n\n          db.session.commit()\n          flash(f'{item.item_name} was successfully updated!', 'success')\n      else:\n          flash(f'Item attempting to be edited could not be found!', 'error')\n\n      return redirect(url_for('items_view_all'))\n\n\n  # Address issue where unsupported HTTP request method is attempted\n  flash(f'Invalid request. Please contact support if this problem persists.', 'error')\n  return redirect(url_for('items_view_all'))\n\n\n@app.route('/InventoryLog/delete/<int:product_id>')\n@login_required\n@role_required(['ADMIN'])\ndef item_delete(product_id):\n  item = InventoryInfo.query.filter_by(product_id=product_id).first()\n  if item:\n        # try:\n        #     os.remove(os.path.join(app.config['PRODUCT_UPLOAD_PATH'], item.image))\n        # except FileNotFoundError:\n        #     pass\n        db.session.delete(item)\n        db.session.commit()\n        flash(f'{item} was successfully deleted!', 'success')\n  else:\n        flash(f'Delete failed! Item could not be found.', 'error')\n\n  return redirect(url_for('items_view_all'))\n\n@app.route('/InventoryInput', methods=['GET', 'POST'])\n@login_required\n@role_required(['ADMIN', 'MANAGER'])\ndef inventory_entry():\n\n  collections = Collections.query.order_by(Collections.collection_id) \\\n        .all()\n\n  if request.method == 'GET':\n      return render_template('Input_Inventory.html', action='create', collections=collections)\n  elif request.method == 'POST':\n      item_name = request.form['item_name']\n      xsmall = request.form['xsmall']\n      small = request.form['small']\n      medium = request.form['medium']\n      large = request.form['large']\n      xlarge = request.form['xlarge']\n      xxlarge = request.form['xxlarge']\n      price = request.form['price']\n      desc = request.form['desc']\n      product_image = request.files['product_image']\n      product_filename = secure_filename(item_name + '-' + product_image.filename)\n\n      if product_image.filename != '':\n          product_image.save(os.path.join(basedir, app.config['PRODUCT_UPLOAD_PATH'], product_filename))\n\n      items = InventoryInfo(item_name=item_name, xsmall=xsmall, small=small, medium=medium, large=large, xlarge=xlarge,\n                        xxlarge=xxlarge, price=price, desc=desc, product_image=product_filename if product_image else '')\n\n      db.session.add(items)\n      db.session.commit()\n      flash(f'{item_name} was successfully added!', 'success')\n      return redirect(url_for('items_view_all'))\n\n\n\n\n  # Address issue where unsupported HTTP request method is attempted\n  flash(f'Invalid request. Please contact support if this problem persists.', 'error')\n  return redirect(url_for('homePage'))\n\n# # might need for input inventory2\n# @app.route('/product/update/<int:product_id>', methods=['GET', 'POST'])\n# @login_required\n# @role_required(['ADMIN', 'MANAGER'])\n# def product_edit(product_id):\n#     if request.method == 'GET':\n#         product = items_view_all.query.filter_by(product_id=product_id).first()\n#\n#         if product:\n#             return render_template('Input_Inventory2.html', product=product, action='update')\n#\n#         else:\n#             flash(f'Product attempting to be edited could not be found!', 'error')\n#\n#     elif request.method == 'POST':\n#         product = items_view_all.query.filter_by(product_id=product_id).first()\n#\n#         if product:\n#             product.product_name = request.form['product_name']\n#             product.product_code = request.form['product_code']\n#             product.product_description = request.form['product_description']\n#             product.product_price = request.form['product_price']\n#             product_image = request.files['product_image']\n#\n#             # When a new image is provided, or there is a desire to delete the current image, attempt to delete it\n#             if ('delete_product_image' in request.form or product_image != '') and 'current_product_image' != '' :\n#                 try:\n#                     os.remove(os.path.join(basedir, app.config['PRODUCT_UPLOAD_PATH'], product.product_image))\n#                     product.product_image = ''\n#                 except:\n#                     pass # Nothing to do as file is no longer being stored\n#\n#\n#                 product_filename = secure_filename(product.product_code + '-' + product_image.filename)  # prepend unique product code to avoid filename collisions\n#\n#                 if product_image.filename != '':\n#                     product_image.save(os.path.join(basedir, app.config['PRODUCT_UPLOAD_PATH'], product_filename))\n#                     product.product_image = product_filename if product_image else ''\n#\n#             db.session.commit()\n#             flash(f'{product.product_name} was successfully updated!', 'success')\n#         else:\n#             flash(f'Product attempting to be edited could not be found!', 'error')\n#\n#         return redirect(url_for('Inventory Log'))\n#\n#     # Address issue where unsupported HTTP request method is attempted\n#     flash(f'Invalid request. Please contact support if this problem persists.', 'error')\n#     return redirect(url_for('Inventory Log'))\n\n@app.route('/OrderConfirm')\ndef OrderConfirm():\n    return render_template('Order Confirmation.html')\n\n@app.route('/OrderDetails')\ndef OrderDetails():\n    return render_template('OrderDetails.html')\n\n\n@app.route('/SalesTracker')\n@login_required\ndef SalesTracker():\n    return render_template('Sales Tracker.html')\n\n\n\n@app.route('/banner')\ndef Banner():\n    return render_template('Banner.html')\n\n# if employee is logged in, this needs to not say only admins have access\n@app.route('/Admin/Create/LogIn', methods=['GET', 'POST'])\n@login_required\n@role_required(['ADMIN'])\ndef Admin_Login():\n\n    if request.method == 'GET':\n        return render_template('Admin_Login.html', action='create')\n\n    elif request.method == 'POST':\n       username = request.form['username']\n       password = request.form['password']\n       first_name = request.form['first_name']\n       last_name = request.form['last_name']\n       email = request.form['email']\n       role = request.form['role']\n\n       sha_password = generate_password_hash(password, method='sha256', salt_length=8)\n\n       user = Credentials(username=username, password=sha_password, first_name=first_name, last_name=last_name,\n                           email=email, role=role)\n\n       db.session.add(user)\n       db.session.commit()\n       flash(f'{username} was successfully added!', 'success')\n       return redirect(url_for('homePage'))\n\n# @app.route('/cart')\n# def Cart():\n#     return render_template('cart.html')\n\n@app.route('/cart/clear')\n\n@login_required\ndef clear_cart():\n    if 'cart' in session:\n        del(session['cart'])\n        flash(f\"Cart Cleared\", 'success')\n    else:\n        flash(f\"Cart already empty\", 'error')\n    return redirect(url_for('Shop'))\n\n@app.route('/cart/add/<int:product_id>', methods=['GET','POST'])\n@login_required\ndef cart_add(product_id):\n    product = InventoryInfo.query.filter_by(product_id=product_id).first()\n    if 'product_quantity' in request.form:\n        product_quantity = int(request.form['product_quantity'])\n    elif request.method == 'GET':\n        product_quantity = 1\n\n    if product:\n        if 'cart' not in session:\n            session['cart'] = []\n\n        size = request.form['size']\n\n        found_item = next((item for item in session['cart'] if item['product_id'] == product_id), None)\n        if found_item:\n            found_item['product_quantity'] += product_quantity\n\n            if found_item['product_quantity'] > app.config['MAX_QUANTITY_PER_ITEM']:\n                found_item['product_quantity'] = app.config['MAX_QUANTITY_PER_ITEM']\n                flash(f\"You cannot exceed more than {app.config['MAX_QUANTITY_PER_ITEM']} of the same item.\")\n\n        else:\n            session['cart'].append(\n                {'product_id': product.product_id, 'item_name': product.item_name, 'size':size, 'price': product.price}\n            )\n\n        session['cart_total'] = sum(item['product_price']*item['product_quantity'] for item in session['cart'])\n\n        flash(f\"{product.product_name} has been successfully added to your cart.\", 'success')\n        return redirect(url_for('cart_view'))\n    else:\n        flash(f'Product could not be found. Please contact support if this problem persists.', 'error')\n\n@app.route('/cart/remove/<int:index>', methods=['GET'])\n@login_required\ndef cart_remove(index):\n    if 'cart' in session:\n        if index < len(session['cart']):\n            product_name = session['cart'][index]['product_name']\n            session['cart'].pop(index)\n            flash(f\"{product_name} has been successfully removed from your cart.\", 'success')\n\n        else:\n            flash(f'Product is not in the cart and could not be removed.', 'error')\n\n    session['cart_total'] = sum(item['product_price'] * item['product_quantity'] for item in session['cart'])\n\n    return redirect(url_for('cart2'))\n\n@app.route('/cart', methods=['GET', 'POST'])\n@login_required\ndef cart_view():\n    if 'cart' in session:\n        return render_template('cart2.html', products=session['cart'], cart_count=len(session['cart']), cart_total=session['cart_total'])\n    else:\n        return render_template('cart2.html', cart_count=0)\n\n@app.route('/CollectionsLog')\n@login_required\n@role_required(['ADMIN', 'EMPLOYEE'])\ndef collections_view_all():\n   collection = Collections.query.order_by(Collections.collection_id) \\\n       .all()\n   return render_template('Collections Log.html', collection=collection)\n\n@app.route('/CollectionsInput', methods=['GET', 'POST'])\n@login_required\n@role_required(['ADMIN', 'EMPLOYEE'])\ndef collections_entry():\n   if request.method == 'GET':\n       return render_template('Input_Collections.html', action='create')\n   elif request.method == 'POST':\n       collection_name = request.form['collection_name']\n\n       collection = Collections(collection_name=collection_name)\n\n       db.session.add(collection)\n       db.session.commit()\n       flash(f'{collection_name} was successfully added!', 'success')\n       return redirect(url_for('collections_view_all'))\n\n   # Address issue where unsupported HTTP request method is attempted\n   flash(f'Invalid request. Please contact support if this problem persists.', 'error')\n   return redirect(url_for('homePage'))\n\n@app.route('/CollectionsLog/Update/<int:collection_id>', methods=['GET', 'POST'])\n@login_required\n@role_required(['ADMIN', 'EMPLOYEE'])\ndef collection_edit(collection_id):\n   if request.method == 'GET':\n       collection = Collections.query.filter_by(collection_id=collection_id).first()\n\n       if collection:\n           # collection_id = collection_id -= 1 OR SOMETHING LIKE THIS????????\n           return render_template('Input_Collections.html', collection_id=collection_id, collection=collection, action='update')\n\n       else:\n           flash(f'Collection attempting to be edited could not be found!', 'error')\n\n   elif request.method == 'POST':\n       collection = Collections.query.filter_by(collection_id=collection_id).first()\n\n       if collection:\n           collection.collection_name = request.form['collection_name']\n\n           db.session.commit()\n           flash(f'{collection.collection_name} was successfully updated!', 'success')\n       else:\n           flash(f'Collection attempting to be edited could not be found!', 'error')\n\n\n       return redirect(url_for('collections_view_all'))\n\n\n   # Address issue where unsupported HTTP request method is attempted\n   flash(f'Invalid request. Please contact support if this problem persists.', 'error')\n   return redirect(url_for('collections_view_all'))\n\n\n@app.route('/CollectionsLog/Delete/<int:collection_id>')\n@login_required\n@role_required(['ADMIN'])\ndef collection_delete(collection_id):\n   collection = Collections.query.filter_by(collection_id=collection_id).first()\n   if collection:\n       db.session.delete(collection)\n       db.session.commit()\n       flash(f'{collection_id} was successfully deleted!', 'success')\n   else:\n       flash(f'Delete failed! Collection could not be found.', 'error')\n\n   return redirect(url_for('collections_view_all'))\n\nif __name__ == '__main__':\n    app.run()\n\n\n# @errors.app_errorhandler(404)\n# def error_404(error):\n#     return render_template('errors/404.html'), 404\n#\n# @errors.app_errorhandler(403)\n# def error_403(error):\n#     return render_template('errors/403.html'), 403\n#\n# @errors.app_errorhandler(500)\n# def error_500(error):\n#     return render_template('errors/500.html'), 500\n\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app.py b/app.py
--- a/app.py	(revision fed8e36bcdd31c6938f63ebf787014c1991c7757)
+++ b/app.py	(date 1682982751171)
@@ -296,7 +296,11 @@
 def items_view_all():
   items = InventoryInfo.query.order_by(InventoryInfo.item_name) \
       .all()
-  return render_template('Inventory Log.html', items=items)
+  dict = {}
+  for collection in Collections.query.all():
+        dict[collection.collection_id] = collection.collection_name
+
+  return render_template('Inventory Log.html', items=items, dict=dict)
 
 
 @app.route('/InventoryLog/update/<int:product_id>', methods=['GET', 'POST'])
@@ -383,6 +387,7 @@
       return render_template('Input_Inventory.html', action='create', collections=collections)
   elif request.method == 'POST':
       item_name = request.form['item_name']
+      collection_id = request.form['collection_id']
       xsmall = request.form['xsmall']
       small = request.form['small']
       medium = request.form['medium']
@@ -397,7 +402,7 @@
       if product_image.filename != '':
           product_image.save(os.path.join(basedir, app.config['PRODUCT_UPLOAD_PATH'], product_filename))
 
-      items = InventoryInfo(item_name=item_name, xsmall=xsmall, small=small, medium=medium, large=large, xlarge=xlarge,
+      items = InventoryInfo(item_name=item_name, collection_id=collection_id, xsmall=xsmall, small=small, medium=medium, large=large, xlarge=xlarge,
                         xxlarge=xxlarge, price=price, desc=desc, product_image=product_filename if product_image else '')
 
       db.session.add(items)
@@ -405,9 +410,6 @@
       flash(f'{item_name} was successfully added!', 'success')
       return redirect(url_for('items_view_all'))
 
-
-
-
   # Address issue where unsupported HTTP request method is attempted
   flash(f'Invalid request. Please contact support if this problem persists.', 'error')
   return redirect(url_for('homePage'))
Index: models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask_sqlalchemy import SQLAlchemy\nfrom flask_login import UserMixin\ndb = SQLAlchemy()\n\n\nclass User(db.Model):\n   __tablename__ = \"User\"\n\n   user_id = db.Column(db.Integer, primary_key=True)\n   account_id = db.Column(db.Integer, db.ForeignKey('Credentials.account_id'))\n   first_name = db.Column(db.String(30), nullable=False)\n   last_name = db.Column(db.String(50), nullable=False)\n   email = db.Column(db.String(60), nullable=False)\n\n\n   def __init__(self, first_name, last_name, email):\n       self.first_name = first_name\n       self.last_name = last_name\n       self.email = email\n\n\n   def __repr__(self):\n       return f\"{self.first_name} {self.last_name} {self.email} {self.address} {self.state}\"\n\n\nclass ShippingInfo(db.Model):\n   __tablename__ = \"ShippingInfo\"\n\n   ship_id = db.Column(db.Integer, primary_key=True)\n   user_id = db.Column(db.Integer, db.ForeignKey('User.user_id'), primary_key=True)\n   address = db.Column(db.String(100), nullable=False)\n   state = db.Column(db.String(2), nullable=False)\n   zipcode = db.Column(db.Integer, nullable=False)\n   phoneNumber = db.Column(db.Integer, nullable=False)\n\n\n   def __init__(self, address, state, zipcode, phoneNumber):\n       self.address = address\n       self.state = state\n       self.zipcode = zipcode\n       self.phoneNumber = phoneNumber\n\n\n   def __repr__(self):\n       return f\" {self.address} {self.state}\"\n\nclass Requests(db.Model):\n   __tablename__ = \"Requests\"\n\n   request_id = db.Column(db.Integer, primary_key=True)\n   account_id = db.Column(db.Integer, db.ForeignKey('Credentials.account_id'), nullable=True)\n   first_name = db.Column(db.String(30), nullable=True)\n   last_name = db.Column(db.String(50), nullable=True)\n   email = db.Column(db.String(60), nullable=True)\n   message = db.Column(db.String(200), nullable=False)\n\n   def __init__(self, account_id, first_name, last_name, email, message):\n       self.account_id = account_id\n       self.first_name = first_name\n       self.last_name = last_name\n       self.email = email\n       self.message = message\n\n   def __repr__(self):\n       return f\"{self.first_name}{self.last_name}{self.message}\"\n\nclass OrderInfo(db.Model):\n   __tablename__ = \"OrderInfo\"\n\n   order_id = db.Column(db.Integer, primary_key=True)\n   customer_id = db.Column(db.Integer, db.ForeignKey('User.user_id'))\n   shipping_mode = db.Column(db.String(30), nullable=False)\n   order_total = db.Column(db.Float, nullable=False)\n   def __init__(self, customer_id, shipping_mode, order_total, date) :\n       self.customer_id = customer_id\n       self.shipping_mode = shipping_mode\n       self.order_total = order_total\n       self.date = date\n   def __repr__(self):\n       return f\"{self.shipping_mode}\"\n\nclass InventoryInfo(db.Model):\n   __tablename__ = \"InventoryInfo\"\n\n\n   product_id = db.Column(db.Integer, primary_key=True)\n   collection_id = db.Column(db.Integer, db.ForeignKey('Collections.collection_id'))\n   item_name = db.Column(db.String(20), nullable=False)\n   xsmall = db.Column(db.Integer, nullable=False)\n   small = db.Column(db.Integer, nullable=False)\n   medium = db.Column(db.Integer, nullable=False)\n   large = db.Column(db.Integer, nullable=False)\n   xlarge = db.Column(db.Integer, nullable=False)\n   xxlarge = db.Column(db.Integer, nullable=False)\n   price = db.Column(db.Integer, nullable=False)\n   desc = db.Column(db.String(50), nullable=False)\n   product_image = db.Column(db.String(100))\n\n\n   def __init__(self, item_name, xsmall, small, medium, large, xlarge, xxlarge, price, desc, product_image):\n       self.item_name = item_name\n       self.xsmall = xsmall\n       self.small = small\n       self.medium = medium\n       self.large = large\n       self.xlarge = xlarge\n       self.xxlarge = xxlarge\n       self.price = price\n       self.desc = desc\n       self.product_image = product_image\n\n\n   def __repr__(self):\n       return f\"{self.item_name}  {self.desc}\"\n\n\nclass Cart(db.Model):\n    __tablename__ = \"Cart\"\n\n    order_id = db.Column(db.Integer, db.ForeignKey('OrderInfo.order_id'), primary_key=True)\n    product_id = db.Column(db.Integer, db.ForeignKey('InventoryInfo.product_id'), primary_key=True)\n\n    def __init__(self, order_id, product_id) :\n        self.order_id = order_id\n        self.product_id = product_id\n\n\nclass Collections(db.Model):\n    __tablename__ = \"Collections\"\n\n    collection_id = db.Column(db.Integer, primary_key=True)\n    collection_name = db.Column(db.String(20), nullable=True)\n\n    def __init__(self, collection_name) :\n        self.collection_name = collection_name\n    def __repr__(self):\n       return f\"{self.collection_name}\"\n\n\nclass Credentials(UserMixin, db.Model):\n    __tablename__ = \"Credentials\"\n\n    account_id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(40), unique=True, nullable=False)\n    password = db.Column(db.String(40), nullable=False)\n    first_name = db.Column(db.String(30), nullable=False)\n    last_name = db.Column(db.String(50), nullable=False)\n    email = db.Column(db.String(100), unique=True, nullable=False)\n    role = db.Column(db.String(10), nullable=False)\n\n    def __init__(self, username, password, first_name, last_name, email, role='STUDENT'):\n        self.username = username\n        self.password = password\n        self.first_name = first_name\n        self.last_name = last_name\n        self.email = email\n        self.role = role\n\n    def get_id(self):\n        return (self.account_id)\n\n    def __repr__(self):\n       return f\"({self.username}){self.password}{self.role}\"\n\n   # Only execute once! Initial load of sizes\n   #db.engine.execute(\"INSERT INTO sizes(size) VALUES ('XS');\")\n\nclass Reviews(db.Model):\n    __tablename__ = \"Reviews\"\n\n    review_id = db.Column(db.Integer, primary_key=True)\n    account_id = db.Column(db.Integer, db.ForeignKey('Credentials.account_id'), nullable=True)\n    first_name = db.Column(db.String(30), nullable=True)\n    last_name = db.Column(db.String(50), nullable=True)\n    email = db.Column(db.String(60), nullable=True)\n    message = db.Column(db.String(200), nullable=False)\n    rating = db.Column(db.String(20), nullable=False)\n    posted = db.Column(db.Boolean, default=False)\n\n    def __init__(self, account_id, first_name, last_name, email, message, rating, posted):\n        self.account_id = account_id\n        self.first_name = first_name\n        self.last_name = last_name\n        self.email = email\n        self.message = message\n        self.rating = rating\n        self.posted = posted\n\n    def __repr__(self):\n        return f\"{self.first_name}{self.last_name}{self.message}\"\n\n# class approvedReviews(db.Model):\n#     __tablename__ = \"approvedReviews\"\n#\n#     review_id = db.Column(db.Integer, primary_key=True)\n#     account_id = db.Column(db.Integer, db.ForeignKey('Credentials.account_id'), nullable=True)\n#     first_name = db.Column(db.String(30), nullable=True)\n#     last_name = db.Column(db.String(50), nullable=True)\n#     email = db.Column(db.String(60), nullable=True)\n#     message = db.Column(db.String(200), nullable=False)\n#     rating = db.Column(db.String(20), nullable=False)\n#\n#     def __init__(self, account_id, first_name, last_name, email, message, rating):\n#         self.account_id = account_id\n#         self.first_name = first_name\n#         self.last_name = last_name\n#         self.email = email\n#         self.message = message\n#         self.rating = rating\n\n    #\n    # def __repr__(self):\n    #     return f\"{self.first_name}{self.last_name}{self.message}\"\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/models.py b/models.py
--- a/models.py	(revision fed8e36bcdd31c6938f63ebf787014c1991c7757)
+++ b/models.py	(date 1682982751171)
@@ -82,9 +82,8 @@
 class InventoryInfo(db.Model):
    __tablename__ = "InventoryInfo"
 
-
    product_id = db.Column(db.Integer, primary_key=True)
-   collection_id = db.Column(db.Integer, db.ForeignKey('Collections.collection_id'))
+   collection_id = db.Column(db.Integer, db.ForeignKey('Collections.collection_id'), nullable=True)
    item_name = db.Column(db.String(20), nullable=False)
    xsmall = db.Column(db.Integer, nullable=False)
    small = db.Column(db.Integer, nullable=False)
@@ -94,11 +93,11 @@
    xxlarge = db.Column(db.Integer, nullable=False)
    price = db.Column(db.Integer, nullable=False)
    desc = db.Column(db.String(50), nullable=False)
-   product_image = db.Column(db.String(100))
+   product_image = db.Column(db.String(100), nullable=True)
 
-
-   def __init__(self, item_name, xsmall, small, medium, large, xlarge, xxlarge, price, desc, product_image):
+   def __init__(self, item_name, collection_id, xsmall, small, medium, large, xlarge, xxlarge, price, desc, product_image):
        self.item_name = item_name
+       self.collection_id = collection_id
        self.xsmall = xsmall
        self.small = small
        self.medium = medium
@@ -109,7 +108,6 @@
        self.desc = desc
        self.product_image = product_image
 
-
    def __repr__(self):
        return f"{self.item_name}  {self.desc}"
 
Index: templates/Inventory Log.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends \"base.html\" %}\n\n\n{% block page_title %}\n   Inventory Log\n{% endblock %}\n\n\n{% block html_head %}\n   Inventory Log\n{% endblock %}\n\n\n{% block page_content %}\n\n<div class=\"text-center\" style=\"height: 100vh\">\n   <div class=\"row\">\n   <div class=\"col\">\n\n\n   <table class=\"table table-striped\">\n       <tr>\n            <th scope=\"col\">Item Name </th>\n            <th scope=\"col\">Collection Name</th>\n            <th scope=\"col\">XSmall</th>\n            <th scope=\"col\">Small</th>\n            <th scope=\"col\">Medium</th>\n            <th scope=\"col\">Large</th>\n            <th scope=\"col\">XLarge</th>\n            <th scope=\"col\">XXLarge</th>\n            <th scope=\"col\">Item Price</th>\n            <th scope=\"col\">Description</th>\n           {% if current_user.role in ['ADMIN', 'EMPLOYEE'] %}\n           <th>Actions</th>\n           {% endif %}\n       </tr>\n\n\n       {% for each_item in items %}\n       <tr>\n           <td>{{ each_item['item_name'] }}</td>\n                <td>{{ each_item['collection_id'] }}</td>\n                <td>{{ each_item['xsmall'] }}</td>\n                <td>{{ each_item['small'] }}</td>\n                <td>{{ each_item['medium'] }}</td>\n                <td>{{ each_item['large'] }}</td>\n                <td>{{ each_item['xlarge'] }}</td>\n                <td>{{ each_item['xxlarge'] }}</td>\n                <td>{{ each_item['price'] }}</td>\n                <td>{{ each_item['desc'] }}</td>\n           {% if current_user.role in ['ADMIN', 'EMPLOYEE'] %}\n           <td>\n               <a href=\"{{ url_for('item_edit', product_id=each_item['product_id']) }}\" class=\"btn btn-secondary\" type = \"submit\" role=\"button\">Edit</a>\n               {% if current_user.role in ['ADMIN'] %}\n               <a href=\"{{ url_for('item_delete', product_id=each_item['product_id']) }}\" class=\"btn btn-secondary\" type = \"submit\" role=\"button\">Delete</a>\n               {% endif %}\n           </td>\n           {% endif %}\n       </tr>\n       {% endfor %}\n   </table>\n   </div>\n   </div>\n\n\n   {% if current_user.role in ['ADMIN', 'EMPLOYEE'] %}\n   <div class=\"row\">\n       <div class=\"col\">\n               Total Number of Items: {{ items|length }}\n       </div>\n   </div>\n\n    <p><br></p>\n   <div class=\"row\">\n       <div class=\"col text-center\">\n           <a href=\"{{ url_for('inventory_entry') }}\" class=\"btn btn-primary\" role=\"button\">Add New Item</a>\n       </div>\n   </div>\n\n       </div>\n   {% endif %}\n\n{% endblock %}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/Inventory Log.html b/templates/Inventory Log.html
--- a/templates/Inventory Log.html	(revision fed8e36bcdd31c6938f63ebf787014c1991c7757)
+++ b/templates/Inventory Log.html	(date 1682982751172)
@@ -39,15 +39,19 @@
        {% for each_item in items %}
        <tr>
            <td>{{ each_item['item_name'] }}</td>
-                <td>{{ each_item['collection_id'] }}</td>
-                <td>{{ each_item['xsmall'] }}</td>
-                <td>{{ each_item['small'] }}</td>
-                <td>{{ each_item['medium'] }}</td>
-                <td>{{ each_item['large'] }}</td>
-                <td>{{ each_item['xlarge'] }}</td>
-                <td>{{ each_item['xxlarge'] }}</td>
-                <td>{{ each_item['price'] }}</td>
-                <td>{{ each_item['desc'] }}</td>
+            {% if dict[each_item['collection_id']] %}
+                <td>{{ dict[each_item["collection_id"]] }}</td>
+            {% else %}
+                <td>None</td>
+            {% endif %}
+           <td>{{ each_item['xsmall'] }}</td>
+           <td>{{ each_item['small'] }}</td>
+           <td>{{ each_item['medium'] }}</td>
+           <td>{{ each_item['large'] }}</td>
+           <td>{{ each_item['xlarge'] }}</td>
+           <td>{{ each_item['xxlarge'] }}</td>
+           <td>{{ each_item['price'] }}</td>
+           <td>{{ each_item['desc'] }}</td>
            {% if current_user.role in ['ADMIN', 'EMPLOYEE'] %}
            <td>
                <a href="{{ url_for('item_edit', product_id=each_item['product_id']) }}" class="btn btn-secondary" type = "submit" role="button">Edit</a>
Index: templates/Input_Inventory.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends \"base.html\" %}\n\n\n{% block title %}\n  {% if action and action == 'create' %}\n      Input New Inventory\n  {% elif action and action == 'update'  %}\n      Update Inventory Item\n  {% else %}\n      View Inventory\n  {% endif %}\n{% endblock %}\n\n\n{% block html_head %}\n  {% if action and action == 'create' %}\n      Input New Inventory\n  {% elif action and action == 'update'  %}\n      Update Inventory Item\n  {% else %}\n      View Inventory\n  {% endif %}\n{% endblock %}\n\n\n{% block page_content %}\n   <!-- Background Photo -->\n<img src = \"../static/images/transparent-background.png\" alt=\"Background Image\" class=\"bg-image\">\n{#       <form action=\"{{ url_for('inventory_entry') }}\" method=\"POST\">#}\n       <!-- Inventory Input -->\n       <div class=\"inventoryBoxTotal\">\n           <div class=\"row\">\n               <div class = \"d-flex justify-content-center\">\n                   <div class = \"border-box col\">\n                       <div class = row>\n                           <div class=\"formInputFields\" style=\"width: 700px\">\n                               <div class = \"border-box-col\">\n                                   <div class=\"row\">\n\n                                   <!-- set up the action for the form -->\n                                   {% if action and action in ['create', 'update'] %}\n                                    <form class=\"row g-4\"\n                                          action=\"{{ url_for('item_edit', product_id=item['product_id']) if item else url_for('inventory_entry') }}\"\n                                          enctype=\"multipart/form-data\" method=\"post\">\n                                    {% else %}\n                                        <div class=\"row g-4\">\n                                    {% endif %}\n\n                                       <div class=\"row\">\n                                       <!-- Inventory Name Input -->\n                                           {% if action and action in ['create'] %}\n                                           <label for=\"item_name\" class=\"form-label\"><strong>Item Name</strong></label>\n                                           <input type=\"text\" class=\"inputFields\" id=\"item_name\" name=\"item_name\" value=\"{{ item['item_name'] if item else '' }}\" required>\n                                           {% endif %}\n                                         </div>\n\n\n                                       <!-- Collection Name Input -->\n                                           <div class=\"col-md-4\">\n                                            {% if action and action in ['create', 'update'] %}\n                                            <label for=\"collection_id\" class=\"form-label\"><strong>Collection Name</strong></label>\n                                            <select name=\"role\" id=\"role\" class=\"form-select\" aria-label=\".form-select-md example\">\n                                                <option value=\"0\">---Select A Collection---</option>\n                                                {% for each_collection in collections %}\n                                                <option value=\"{{ each_collection['collection_id'] }}\"\n                                                        {{ 'selected' if item and each_collection['collection_id'] == item['collection_id'] else ''}}>{{ each_collection['collection_name'] }}</option>\n                                                {% endfor %}\n                                            </select>\n                                            {% else %}\n                                                 <strong>Collection Name</strong><br>\n                                                {% for each_collection in collections %}\n                                                    {{ each_collection['collection_name'] if item and each_collection['collection_id'] == item['collection_id'] else ''}}\n                                                {% endfor %}\n                                            {% endif %}\n                                           </div>\n\n\n                                   <!-- Inventory Size Quantity Input -->\n                                       {% if action and action in ['create'] %}\n                                           <label for=\"size\" class=\"formFieldsLabels\"><strong>Size Quantity</strong></label>\n                                           <div class=”cart-counter”>\n                                           X-Small <input type=\"number\" class=\"item-info\" id=\"xsmall\" name=\"xsmall\" min=\"0\" max=\"15\" value=\"{{ item['xsmall'] if item else 0 }}\" required>\n                                           Small <input type=\"number\" class=\"item-info\" id=\"small\" name=\"small\" min=\"0\" max=\"15\" value=\"{{ item['small'] if item else 0 }}\" required>\n                                           Medium <input type=\"number\" class=\"item-info\" id=\"medium\" name=\"medium\" min=\"0\" max=\"15\" value=\"{{ item['medium'] if item else 0 }}\" required>\n                                           Large <input type=\"number\" class=\"item-info\" id=\"large\" name=\"large\" min=\"0\" max=\"15\" value=\"{{ item['large'] if item else 0 }}\" required>\n                                           X-Large <input type=\"number\" class=\"item-info\" id=\"xlarge\" name=\"xlarge\" min=\"0\" max=\"15\" value=\"{{ item['xlarge'] if item else 0 }}\" required>\n                                           XX-Large <input type=\"number\" class=\"item-info\" id=\"xxlarge\" name=\"xxlarge\" min=\"0\" max=\"15\" value=\"{{ item['xxlarge'] if item else 0 }}\" required>\n                                           </div>\n                                       {% endif %}\n\n\n                               <!-- Inventory Price Input -->\n                                       {% if action and action in ['create'] %}\n                                           <label for=\"price\" class=\"form-label\"><strong>Price</strong></label>\n                                           <input type=\"number\" class=\"inputFields\" id=\"price\" name=\"price\" value=\"{{ item['price'] if item else '' }}\" required>\n                                           {% endif %}\n\n\n\n\n                           <!-- Inventory Description Input -->\n                                       {% if action and action in ['create'] %}\n                                           <label for=\"desc\" class=\"form-label\"><strong>Description</strong></label>\n                                           <input type=\"text\" class=\"inputFields\" id=\"desc\" name=\"desc\" value=\"{{ item['desc'] if item else '' }}\" required>\n                                           {% endif %}\n\n                           <!-- Inventory Image Input -->\n                                       <div class=\"col-md-2\">\n                                           {% if action and action in ['create', 'update'] %}<label for=\"product_image\" class=\"form-label\">{% endif %}\n                                               <strong>Image</strong>\n                                           {% if action and action in ['create', 'update'] %}</label>{% endif %}\n                                         </div>\n                                         <div class=\"col-md-10\">\n                                           {% if (not action) or action not in ['create', 'update']  %}\n                                               <img class=\"mb-3\" src=\"{{ url_for('static', filename='/products/' + item['product_image']) }}\" alt=\"Picture of {{ item['item_name'] }}\">\n                                           {% else %}\n                                               {% if action in ['update'] and item['product_image'] != '' %}\n                                                   <img class=\"mb-3\" src=\"{{ url_for('static', filename='/products/' + item['product_image']) }}\" alt=\"Picture of {{ item['item_name'] }}\">\n                                               {% endif %}\n                                               {% if action in ['create','update'] %}\n                                                   <input type=\"file\" class=\"form-control\" id=\"product_image\" name=\"product_image\">\n                                               {% endif %}\n                                               {% if action in ['update'] and item['product_image'] != '' %}\n                                                   <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"delete_product_image\" name=\"delete_product_image\">\n                                                   <label class=\"form-check-label\" for=\"delete_product_image\"></label> <strong>Delete product image without providing a replacement</strong>\n                                               {% endif %}\n                                         {% endif %}\n                                         </div>\n\n                               <!-- Inventory Name Read/Update -->\n                                       {% if action and action in ['read', 'update'] %}\n                                       <div class=\"row\">\n                                       {% if action and action == 'update' %}\n                                       <label for=\"item_name\" class=\"form-label\"><strong>Item Name</strong></label>\n                                       <input type=\"text\" class=\"inputFields\" id=\"item_name\" name=\"item_name\"\n                                              value=\"{{ item['item_name'] if item else '' }}\" required>\n                                       {% else %}\n                                           <strong>Item Name</strong>\n                                           <br> {{ item['item_mame'] }}\n                                       {% endif %}\n                                       {% endif %}\n                                       </div>\n\n\n                               <!-- Inventory Size Read/Update -->\n                                       {% if action and action in ['read', 'update'] %}\n                                       <div class=\"row\">\n                                       {% if action and action == 'update' %}\n                                       <label for=\"size\" class=\"formFieldsLabels\"><strong>Size Quantity</strong></label>\n                                           <div class=”cart-counter”>\n                                           X-Small <input type=\"number\" class=\"item-info\" id=\"xsmall\" name=\"xsmall\" min=\"0\" max=\"15\" value=\"{{ item['xsmall'] if item else 0 }}\" required>\n                                           Small <input type=\"number\" class=\"item-info\" id=\"small\" name=\"small\" min=\"0\" max=\"15\" value=\"{{ item['small'] if item else 0 }}\" required>\n                                           Medium <input type=\"number\" class=\"item-info\" id=\"medium\" name=\"medium\" min=\"0\" max=\"15\" value=\"{{ item['medium'] if item else 0 }}\" required>\n                                           Large <input type=\"number\" class=\"item-info\" id=\"large\" name=\"large\" min=\"0\" max=\"15\" value=\"{{ item['large'] if item else 0 }}\" required>\n                                           X-Large <input type=\"number\" class=\"item-info\" id=\"xlarge\" name=\"xlarge\" min=\"0\" max=\"15\" value=\"{{ item['xlarge'] if item else 0 }}\" required>\n                                           XX-Large <input type=\"number\" class=\"item-info\" id=\"xxlarge\" name=\"xxlarge\" min=\"0\" max=\"15\" value=\"{{ item['xxlarge'] if item else 0 }}\" required>\n                                           </div>\n                                       {% else %}\n                                           <strong>Size Quantity</strong>\n                                           <br> {{ item['xsmall'] }}\n                                           <br> {{ item['small'] }}\n                                           <br> {{ item['medium'] }}\n                                           <br> {{ item['large'] }}\n                                           <br> {{ item['xlarge'] }}\n                                           <br> {{ item['xxlarge'] }}\n                                       {% endif %}\n                                       {% endif %}\n                                     </div>\n\n\n                                   <!-- Inventory Price Read/Update -->\n                                   {% if action and action in ['read', 'update'] %}\n                                       <div class=\"row\">\n                                       {% if action and action == 'update' %}\n                                       <label for=\"price\" class=\"form-label\"><strong>Item Price</strong></label>\n                                       <input type=\"number\" class=\"inputFields\" id=\"price\" name=\"price\"\n                                              value=\"{{ item['price'] if item else '' }}\" required>\n                                       {% else %}\n                                           <strong>Price</strong>\n                                           <br> {{ item['price'] }}\n                                       {% endif %}\n                                       {% endif %}\n                                     </div>\n\n\n                                   <!-- Inventory Description Read/Update -->\n                                   {% if action and action in ['read', 'update'] %}\n                                       <div class=\"row\">\n                                       {% if action and action == 'update' %}\n                                       <label for=\"desc\" class=\"form-label\"><strong>Description</strong></label>\n                                       <input type=\"text\" class=\"inputFields\" id=\"desc\" name=\"desc\"\n                                              value=\"{{ item['desc'] if item else '' }}\" required>\n                                       {% else %}\n                                           <strong>Description</strong>\n                                           <br> {{ item['desc'] }}\n                                       {% endif %}\n                                       {% endif %}\n                                     </div>\n\n                                   <div class=\"row\">\n                                     <input type=\"submit\" value=\"Submit Inventory\" class=\"inventoryButtons\" method=\"POST\">\n                                   </div>\n                               </div>\n                           </div>\n                       </div>\n                   </div>\n               </div>\n           </div>\n       </div>\n   </div>\n\n{% if action and action in ['create', 'update'] %}\n</form>\n{% else %}\n    </div>\n{% endif %}\n{% endblock %}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/Input_Inventory.html b/templates/Input_Inventory.html
--- a/templates/Input_Inventory.html	(revision fed8e36bcdd31c6938f63ebf787014c1991c7757)
+++ b/templates/Input_Inventory.html	(date 1682982751171)
@@ -59,7 +59,7 @@
                                            <div class="col-md-4">
                                             {% if action and action in ['create', 'update'] %}
                                             <label for="collection_id" class="form-label"><strong>Collection Name</strong></label>
-                                            <select name="role" id="role" class="form-select" aria-label=".form-select-md example">
+                                            <select name="collection_id" id="role" class="form-select" aria-label=".form-select-md example">
                                                 <option value="0">---Select A Collection---</option>
                                                 {% for each_collection in collections %}
                                                 <option value="{{ each_collection['collection_id'] }}"
@@ -96,8 +96,6 @@
                                            {% endif %}
 
 
-
-
                            <!-- Inventory Description Input -->
                                        {% if action and action in ['create'] %}
                                            <label for="desc" class="form-label"><strong>Description</strong></label>
Index: templates/Request Log.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends \"base.html\" %}\n\n\n{% block page_title %}\n   Requests Log\n{% endblock %}\n\n\n{% block html_head %}\n    <!-- Add space between header and title -->\n    <div class=\"GenProduct_HeadingSpacer\"></div>\n   Requests Log\n{% endblock %}\n\n\n{% block page_content %}\n\n<div class=\"text-center\" style=\"height: 100vh\">\n   <!-- Creation of Collections table -->\n    <div class=\"row\">\n    <div class=\"col\">\n\n   <table class=\"table table-striped\">\n       <tr>\n            <th scope=\"col\">Request ID</th>\n            <th scope=\"col\">Account ID</th>\n            <th scope=\"col\">First Name</th>\n            <th scope=\"col\">Last Name</th>\n            <th scope=\"col\">Email</th>\n            <th scope=\"col\">Message</th>\n           {% if current_user.role in ['ADMIN', 'EMPLOYEE'] %}\n           <th>Actions</th>\n           {% endif %}\n       </tr>\n\n\n         {% for each_request in requests %}\n{#             {% if account_id != None %}#}\n           <td>{{ each_request['request_id'] }}</td>\n           <td>{{ each_request['account_id'] }}</td>\n           <td>{{ each_request['first_name'] }}</td>\n           <td>{{ each_request['last_name'] }}</td>\n           <td>{{ each_request['email'] }}</td>\n            <td class=\"wrap\">{{ each_request['message'] }}</td>\n           <td>\n               {% if current_user.role in ['ADMIN'] %}\n               <a href=\"{{ url_for('requests_fulfilled', request_id=each_request['request_id']) }}\" class=\"btn btn-secondary\" type = \"submit\" role=\"button\">Fulfilled</a>\n               {% endif %}\n           </td>\n       </tr>\n{#           {% else %}#}\n{#       <tr>#}\n{#        <tr>#}\n{#           <td>{{ each_request['request_id'] }}</td>#}\n{#           <td>{{ each_request['account_id'] }}</td>#}\n{#           <td>{{ each_user['first_name'] }}</td>#}\n{#           <td>{{ each_request['last_name'] }}</td>#}\n{#           <td>{{ each_request['email'] }}</td>#}\n{##}\n{#            <td class=\"wrap\">{{ each_request['message'] }}</td>#}\n{#           <td>#}\n{#               {% if current_user.role in ['ADMIN'] %}#}\n{#               <a href=\"{{ url_for('requests_fulfilled', request_id=each_request['request_id']) }}\" class=\"btn btn-secondary\" type = \"submit\" role=\"button\">Fulfilled</a>#}\n{#               {% endif %}#}\n{#           </td>#}\n{#       </tr>#}\n           {% endfor %}\n\n   </table>\n   </div>\n   </div>\n\n   {% if current_user.role in ['ADMIN', 'EMPLOYEE'] %}\n   <div class=\"row\">\n       <div class=\"col\">\n               Total Number of Requests: {{ requests|length }}\n       </div>\n   </div>\n\n    <p><br></p>\n       </div>\n   {% endif %}\n\n{% endblock %}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/Request Log.html b/templates/Request Log.html
--- a/templates/Request Log.html	(revision fed8e36bcdd31c6938f63ebf787014c1991c7757)
+++ b/templates/Request Log.html	(date 1682982751172)
@@ -48,22 +48,6 @@
                {% endif %}
            </td>
        </tr>
-{#           {% else %}#}
-{#       <tr>#}
-{#        <tr>#}
-{#           <td>{{ each_request['request_id'] }}</td>#}
-{#           <td>{{ each_request['account_id'] }}</td>#}
-{#           <td>{{ each_user['first_name'] }}</td>#}
-{#           <td>{{ each_request['last_name'] }}</td>#}
-{#           <td>{{ each_request['email'] }}</td>#}
-{##}
-{#            <td class="wrap">{{ each_request['message'] }}</td>#}
-{#           <td>#}
-{#               {% if current_user.role in ['ADMIN'] %}#}
-{#               <a href="{{ url_for('requests_fulfilled', request_id=each_request['request_id']) }}" class="btn btn-secondary" type = "submit" role="button">Fulfilled</a>#}
-{#               {% endif %}#}
-{#           </td>#}
-{#       </tr>#}
            {% endfor %}
 
    </table>
